{"version":3,"file":"notificator.js","mappings":"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","sources":["webpack://Notificator/webpack/universalModuleDefinition","webpack://Notificator/webpack/bootstrap","webpack://Notificator/webpack/runtime/define property getters","webpack://Notificator/webpack/runtime/hasOwnProperty shorthand","webpack://Notificator/webpack/runtime/make namespace object","webpack://Notificator/./src/notificator.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Notificator\"] = factory();\n\telse\n\t\troot[\"Notificator\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","type ChannelType = (data: any) => void;\n\ntype ChannelsType = {\n  [key: string]: Array<ChannelType>;\n};\n\ntype ReceiveMessageData = {\n  channel: string;\n  data: any;\n};\n\ntype CallbacksType = {\n  onOpened?: (event: Event) => void;\n  onClosed?: (event: CloseEvent) => void;\n  onError?: (event: Event) => void;\n  onMessage?: (event: MessageEvent) => void;\n  onMessageResult?: (result: ReceiveMessageData) => void;\n};\n\nclass NotificatorJs {\n  apiKey: string = null;\n  webSocketProtocol: string = process.env.PROTOCOL || 'wss';\n  webSocketHost: string = process.env.HOST || 'notificator-service-l2oj2.ondigitalocean.app';\n  socketInstance: WebSocket = null;\n  channels: ChannelsType = {};\n  callbacks: CallbacksType = {};\n\n  constructor(apiKey: string, callbacks: CallbacksType = {}) {\n    this.apiKey = apiKey;\n\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks,\n    };\n  }\n\n  connect() {\n    this.initInstance();\n    this.addEvents();\n  }\n\n  disconnect() {\n    if (this.socketInstance) {\n      this.socketInstance.close();\n      this.removeEvents();\n      this.socketInstance = null;\n      this.channels = {};\n    }\n  }\n\n  subscribe(channel: string, callback: ChannelType = null) {\n    if (callback) {\n      if (!this.channels[channel]) {\n        this.channels[channel] = [callback];\n      } else {\n        this.channels[channel].push(callback);\n      }\n    }\n\n    this.socketInstance.send(JSON.stringify({ cmd: 'sub', name: channel }));\n  }\n\n  unsubscribe(channel: string, callback: ChannelType = null) {\n    if (!this.channels[channel]) {\n      return;\n    }\n\n    if (callback) {\n      this.channels[channel] =\n        this.channels[channel].filter((item: ChannelType) => item !== callback);\n    }\n\n    if (!callback || !this.channels[channel].length) {\n      delete this.channels[channel];\n      this.socketInstance.send(JSON.stringify({ cmd: 'unsub', name: channel }));\n    }\n  }\n\n  unsubscribeAllChannels() {\n    this.channels = {};\n    this.socketInstance.send(JSON.stringify({ cmd: 'unsub' }));\n  }\n\n  initInstance() {\n    this.socketInstance =\n      new WebSocket(`${this.webSocketProtocol}://${this.webSocketHost}/${this.apiKey}`);\n  }\n\n  addEvents() {\n    if (this.socketInstance) {\n      this.socketInstance.addEventListener('open', this.eventConnected);\n      this.socketInstance.addEventListener('close', this.eventDisconnected);\n      this.socketInstance.addEventListener('error', this.eventError);\n      this.socketInstance.addEventListener('message', this.eventReceiveMessage);\n    }\n  }\n\n  removeEvents() {\n    if (this.socketInstance) {\n      this.socketInstance.removeEventListener('open', this.eventConnected);\n      this.socketInstance.removeEventListener('close', this.eventDisconnected);\n      this.socketInstance.removeEventListener('error', this.eventError);\n      this.socketInstance.removeEventListener('message', this.eventReceiveMessage);\n    }\n  }\n\n  eventConnected(event: Event) {\n    if (this.callbacks.onOpened) {\n      this.callbacks.onOpened(event);\n    }\n  }\n\n  eventDisconnected(event: CloseEvent) {\n    if (this.callbacks.onClosed) {\n      this.callbacks.onClosed(event);\n    }\n  }\n\n  eventError(event: Event) {\n    if (this.callbacks.onError) {\n      this.callbacks.onError(event);\n    }\n  }\n\n  eventReceiveMessage(event: MessageEvent) {\n    const result = <ReceiveMessageData>JSON.parse(event.data);\n\n    if (this.callbacks.onMessage) {\n      this.callbacks.onMessage(event);\n    }\n\n    if (this.callbacks.onMessageResult) {\n      this.callbacks.onMessageResult(result);\n    }\n\n    this.channels[result.channel]?.forEach((callback: ChannelType) => (\n      callback(result.data)\n    ));\n  }\n}\n\nexport default NotificatorJs;\n"],"names":[],"sourceRoot":""}