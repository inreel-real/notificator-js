{"version":3,"file":"notificator.min.js","mappings":"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","sources":["webpack://Notificator/webpack/universalModuleDefinition","webpack://Notificator/webpack/bootstrap","webpack://Notificator/webpack/runtime/define property getters","webpack://Notificator/webpack/runtime/hasOwnProperty shorthand","webpack://Notificator/webpack/runtime/make namespace object","webpack://Notificator/./src/notificator.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Notificator\"] = factory();\n\telse\n\t\troot[\"Notificator\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","type ChannelType = (data: any) => void;\n\ntype ChannelsType = {\n  [key: string]: Array<ChannelType>;\n};\n\ntype ReceiveMessageData = {\n  channel: string;\n  data: any;\n};\n\ntype CallbacksType = {\n  onOpened?: (event: Event) => void;\n  onClosed?: (event: CloseEvent) => void;\n  onError?: (event: Event) => void;\n  onMessage?: (event: MessageEvent) => void;\n  onMessageResult?: (result: ReceiveMessageData) => void;\n};\n\nclass NotificatorJs {\n  apiKey: string = null;\n  webSocketHost: string = '127.0.0.1:8001';\n  socketInstance: WebSocket = null;\n  channels: ChannelsType = {};\n  callbacks: CallbacksType = {};\n\n  constructor(apiKey: string, callbacks: CallbacksType = {}) {\n    this.apiKey = apiKey;\n\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks,\n    };\n  }\n\n  connect() {\n    this.initInstance();\n    this.addEvents();\n  }\n\n  disconnect() {\n    if (this.socketInstance) {\n      this.socketInstance.close();\n      this.removeEvents();\n      this.socketInstance = null;\n    }\n  }\n\n  subscribeChannel(channel: string, callback: ChannelType = null) {\n    if (callback) {\n      if (!this.channels[channel]) {\n        this.channels[channel] = [callback];\n      } else {\n        this.channels[channel].push(callback);\n      }\n    }\n\n    this.socketInstance.send(JSON.stringify({ cmd: 'sub', name: channel }));\n  }\n\n  unsubscribeChannel(channel: string, callback: ChannelType = null) {\n    if (!this.channels[channel]) {\n      return;\n    }\n\n    if (callback) {\n      this.channels[channel] =\n        this.channels[channel].filter((item: ChannelType) => item !== callback);\n    }\n\n    if (!callback || !this.channels[channel].length) {\n      delete this.channels[channel];\n      this.socketInstance.send(JSON.stringify({ cmd: 'unsub', name: channel }));\n    }\n  }\n\n  unsubscribeAllChannels() {\n    this.channels = {};\n  }\n\n  initInstance() {\n    this.socketInstance = new WebSocket(`ws://${this.webSocketHost}/${this.apiKey}`);\n  }\n\n  addEvents() {\n    if (this.socketInstance) {\n      this.socketInstance.addEventListener('open', this.eventConnected);\n      this.socketInstance.addEventListener('close', this.eventDisconnected);\n      this.socketInstance.addEventListener('error', this.eventError);\n      this.socketInstance.addEventListener('message', this.eventReceiveMessage);\n    }\n  }\n\n  removeEvents() {\n    if (this.socketInstance) {\n      this.socketInstance.removeEventListener('open', this.eventConnected);\n      this.socketInstance.removeEventListener('close', this.eventDisconnected);\n      this.socketInstance.removeEventListener('error', this.eventError);\n      this.socketInstance.removeEventListener('message', this.eventReceiveMessage);\n    }\n  }\n\n  eventConnected(event: Event) {\n    if (this.callbacks.onOpened) {\n      this.callbacks.onOpened(event);\n    }\n  }\n\n  eventDisconnected(event: CloseEvent) {\n    if (this.callbacks.onClosed) {\n      this.callbacks.onClosed(event);\n    }\n  }\n\n  eventError(event: Event) {\n    if (this.callbacks.onError) {\n      this.callbacks.onError(event);\n    }\n  }\n\n  eventReceiveMessage(event: MessageEvent) {\n    const result = <ReceiveMessageData>JSON.parse(event.data);\n\n    if (this.callbacks.onMessage) {\n      this.callbacks.onMessage(event);\n    }\n\n    if (this.callbacks.onMessageResult) {\n      this.callbacks.onMessageResult(result);\n    }\n\n    this.channels[result.channel]?.forEach((callback: ChannelType) => (\n      callback(result.data)\n    ));\n  }\n}\n\n\nexport default NotificatorJs;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","apiKey","callbacks","webSocketHost","socketInstance","channels","this","connect","initInstance","addEvents","disconnect","close","removeEvents","subscribeChannel","channel","callback","push","send","JSON","stringify","cmd","name","unsubscribeChannel","filter","item","length","unsubscribeAllChannels","WebSocket","addEventListener","eventConnected","eventDisconnected","eventError","eventReceiveMessage","removeEventListener","event","onOpened","onClosed","onError","result","parse","data","onMessage","onMessageResult","forEach"],"sourceRoot":""}